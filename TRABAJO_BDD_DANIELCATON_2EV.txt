CREATE TABLE PROFESORES(
DNI VARCHAR2(9) NOT NULL,
TFNO VARCHAR2(9) NOT NULL,
NOMBRE VARCHAR2(30) NOT NULL,
APELLIDO VARCHAR2(30) NOT NULL,
CONSTRAINT PK_PROFESORES PRIMARY KEY (DNI),
CONSTRAINT NN_TFNO CHECK (TFNO IS NOT NULL),
CONSTRAINT UQ_TFNO UNIQUE(TFNO)
);

CREATE TABLE HORARIO(
ID_HORARIO NUMBER(4) NOT NULL,
DNI_TRABAJADOR VARCHAR2(9) NOT NULL, 
DIA DATE NOT NULL,
HORA_INICIO TIMESTAMP NOT NULL,
HORA_FINAL TIMESTAMP NOT NULL,
INICIO_PAUSA TIMESTAMP NOT NULL,
FIN_PAUSA TIMESTAMP NOT NULL,
CONSTRAINT PK_Horario PRIMARY KEY (ID_HORARIO),
CONSTRAINT FK_HORARIO FOREIGN KEY(DNI_TRABAJADOR) REFERENCES PROFESORES(DNI)
);

CREATE TABLE FICHAJE(
ID_FICHAJE NUMBER(4) NOT NULL ,
HORARIO_ID NUMBER(4) NOT NULL,
TRABAJADOR_DNI VARCHAR2(9) NOT NULL,
DIA_SEMANA DATE NOT NULL ,
HORA_ENTRADA TIMESTAMP NOT NULL,
HORA_SALIDA TIMESTAMP NOT NULL,
PAUSA_INICIO TIMESTAMP NOT NULL,
PAUSA_FINAL TIMESTAMP NOT NULL,
CONSTRAINT PK_Horarios PRIMARY KEY (ID_FICHAJE),
CONSTRAINT FK_Fichaje FOREIGN KEY (HORARIO_ID) REFERENCES Horario(ID_HORARIO),
CONSTRAINT FK_FICHAJE2 FOREIGN KEY(TRABAJADOR_DNI) REFERENCES PROFESORES(DNI)
);

***********************************************************************
INSERTS:

INSERT INTO PROFESORES VALUES ('12345678A', '123456789', 'Juan', 'Pérez');
INSERT INTO PROFESORES VALUES ('87654321B', '987654321', 'María', 'García');

INSERT INTO HORARIO VALUES (1, '12345678A', TO_DATE('2023-03-15', 'YYYY-MM-DD'), TO_TIMESTAMP('2023-03-15 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 16:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 12:30:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO HORARIO VALUES (2, '87654321B', TO_DATE('2023-03-15', 'YYYY-MM-DD'), TO_TIMESTAMP('2023-03-15 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 16:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 12:30:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO FICHAJE VALUES (1, 1, '12345678A', TO_DATE('2023-03-15', 'YYYY-MM-DD'), TO_TIMESTAMP('2023-03-15 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 16:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 12:30:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO FICHAJE VALUES (2, 2, '87654321B', TO_DATE('2023-03-15', 'YYYY-MM-DD'), TO_TIMESTAMP('2023-03-15 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 16:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-03-15 12:30:00', 'YYYY-MM-DD HH24:MI:SS'));
***********************************************************************
a) 
PRIMER PROCEDURE
 
CREATE OR REPLACE PROCEDURE EMPLEADOS_MENOS_HORAS AS
    CURSOR c_horarios IS
        SELECT h.dni_trabajador, SUM(EXTRACT(HOUR FROM(h.hora_final - h.hora_inicio))) AS horas_trabajadas
        FROM horario h, fichaje f   
        WHERE h.id_horario = f.horario_id
        GROUP BY h.dni_trabajador;
    v_horas_minimas NUMBER(4) := 6;
    v_nombre Profesores.nombre%TYPE;
    v_dni Profesores.dni%TYPE;
    v_horas_trabajadas number(4);
BEGIN
    FOR r_horario IN c_horarios LOOP
        IF r_horario.horas_trabajadas < v_horas_minimas THEN
            SELECT nombre, r_horario.dni_trabajador, r_horario.horas_trabajadas
            INTO v_nombre, v_dni, v_horas_trabajadas
            FROM profesores
            WHERE dni = r_horario.dni_trabajador;
            
            DBMS_OUTPUT.PUT_LINE('El empleado ' || v_nombre ||  ' con DNI ' || v_dni || ' ha trabajado menos de ' || v_horas_minimas || ' horas (' || v_horas_trabajadas || ' horas).');
        END IF;
    END LOOP;
END EMPLEADOS_MENOS_HORAS;
/



SEGUNDO PROCEDURE

CREATE OR REPLACE PROCEDURE EMPLEADOS_DATOS_INCOMPLETOS AS
BEGIN
    FOR r_empleado IN (SELECT * FROM profesores WHERE tfno IS NULL) LOOP
        DBMS_OUTPUT.PUT_LINE('El empleado con DNI ' || r_empleado.dni || ' tiene datos laborales incompletos.');
    END LOOP;
END EMPLEADOS_DATOS_INCOMPLETOS;




TERCER PROCEDURE

CREATE OR REPLACE PROCEDURE VERIFICAR_HORAS_EXTRA (v_dni IN VARCHAR2, v_fecha_inicio IN DATE, v_fecha_fin IN DATE) AS
  v_horas_extra NUMBER;
BEGIN
  SELECT SUM(EXTRACT(HOUR FROM (PAUSA_FINAL - PAUSA_INICIO)) + EXTRACT(HOUR FROM (HORA_SALIDA - HORA_ENTRADA))) - 40
  INTO v_horas_extra
  FROM FICHAJE
  WHERE TRABAJADOR_DNI = v_dni AND DIA_SEMANA BETWEEN v_fecha_inicio AND v_fecha_fin;
  
  IF v_horas_extra > 80 THEN
    DBMS_OUTPUT.PUT_LINE('El trabajador con DNI ' || v_dni || ' ha realizado ' || v_horas_extra || ' horas extra en el periodo desde ' || v_fecha_inicio || ' hasta ' || v_fecha_fin || '.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('El trabajador con DNI ' || v_dni || ' ha realizado ' || v_horas_extra || ' horas extra en el periodo desde ' || v_fecha_inicio || ' hasta ' || v_fecha_fin || ', lo que no supera las 80 horas extra permitidas.');
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No se encontraron fichajes para el trabajador con DNI ' || v_dni || ' en el periodo desde ' || v_fecha_inicio || ' hasta ' || v_fecha_fin || '.');
END;
********************************************************************************************************************
FUNCIONES

PRIMERA FUNCION 

CREATE OR REPLACE FUNCTION calcularHorasTrabajadas(
    dni_trabajador IN VARCHAR2,
    dia_semana IN DATE)
RETURN NUMBER
IS
    total_horas NUMBER;
BEGIN
    SELECT SUM(EXTRACT(HOUR FROM (HORA_FINAL - HORA_INICIO)) + 
               EXTRACT(MINUTE FROM (HORA_FINAL - HORA_INICIO))/60 - 
               EXTRACT(HOUR FROM (FIN_PAUSA - INICIO_PAUSA)) - 
               EXTRACT(MINUTE FROM (FIN_PAUSA - INICIO_PAUSA))/60) 
    INTO total_horas
    FROM HORARIO h, FICHAJE f
    WHERE h.ID_HORARIO = f.HORARIO_ID 
      AND f.TRABAJADOR_DNI = dni_trabajador 
      AND TRUNC(f.DIA_SEMANA) = TRUNC(dia_semana);
      
    RETURN total_horas;
END;
/


SEGUNDA FUNCION

CREATE OR REPLACE FUNCTION calcularHorasTrabajadas(
    dni_trabajador IN VARCHAR2,
    dia_semana IN DATE)
RETURN NUMBER
IS
    total_horas NUMBER;
BEGIN
    SELECT SUM(EXTRACT(HOUR FROM (HORA_FINAL - HORA_INICIO)) + 
               EXTRACT(MINUTE FROM (HORA_FINAL - HORA_INICIO))/60 - 
               EXTRACT(HOUR FROM (FIN_PAUSA - INICIO_PAUSA)) - 
               EXTRACT(MINUTE FROM (FIN_PAUSA - INICIO_PAUSA))/60) 
    INTO total_horas
    FROM HORARIO h, FICHAJE f
    WHERE h.ID_HORARIO = f.HORARIO_ID 
      AND f.TRABAJADOR_DNI = dni_trabajador 
      AND TRUNC(f.DIA_SEMANA) = TRUNC(dia_semana);
      
    RETURN total_horas;
END;
/

************************************************************************************************************************************
TRIGGERS

alter session set "_ORACLE_SCRIPT"=true;
CREATE USER DIOS IDENTIFIED BY 123;
GRANT CONNECT TO DIOS;
GRANT RESOURCE TO DIOS;


SINO NO SE PUEDEN USAR TRIGGERS EN SYS

TRIGGER 1

CREATE OR REPLACE TRIGGER TRG_CAMBIO_HORARIO
AFTER UPDATE ON FICHAJE
FOR EACH ROW
DECLARE
  v_dni_trabajador HORARIO.DNI_TRABAJADOR%TYPE;
  v_id_horario HORARIO.ID_HORARIO%TYPE;
BEGIN
  SELECT HORARIO.ID_HORARIO INTO v_id_horario
  FROM HORARIO
  WHERE HORARIO.DNI_TRABAJADOR = :NEW.TRABAJADOR_DNI
    AND HORARIO.DIA = :NEW.DIA_SEMANA
    AND :NEW.HORA_ENTRADA BETWEEN HORARIO.HORA_INICIO AND HORARIO.HORA_FINAL;

  UPDATE FICHAJE SET HORARIO_ID = v_id_horario WHERE ID_FICHAJE = :NEW.ID_FICHAJE;
END;


TRIGGER 2

CREATE OR REPLACE TRIGGER TRG_CAMBIO_LABORAL
AFTER UPDATE OF TFNO, NOMBRE, APELLIDO ON PROFESORES
FOR EACH ROW
DECLARE
  v_dni_trabajador HORARIO.DNI_TRABAJADOR%TYPE;
BEGIN
  SELECT DISTINCT DNI_TRABAJADOR INTO v_dni_trabajador
  FROM HORARIO
  WHERE HORARIO.DNI_TRABAJADOR = :OLD.DNI;

  IF v_dni_trabajador IS NOT NULL THEN
    UPDATE PROFESORES P
    SET P.NOMBRE = :NEW.NOMBRE, P.APELLIDO = :NEW.APELLIDO, P.TFNO = :NEW.TFNO
    WHERE P.DNI = :OLD.DNI;

    UPDATE HORARIO H
    SET H.DNI_TRABAJADOR = :NEW.DNI
    WHERE H.DNI_TRABAJADOR = :OLD.DNI;
  END IF;
END;
/

TRIGGER 3

CREATE OR REPLACE TRIGGER TRG_CAMBIO_FICHAJE
AFTER UPDATE OF HORA_ENTRADA, HORA_SALIDA, PAUSA_INICIO, PAUSA_FINAL ON FICHAJE
FOR EACH ROW
DECLARE
  v_id_horario HORARIO.ID_HORARIO%TYPE;
BEGIN
  SELECT DISTINCT HORARIO.ID_HORARIO INTO v_id_horario
  FROM HORARIO
  WHERE HORARIO.DNI_TRABAJADOR = :NEW.TRABAJADOR_DNI
    AND HORARIO.DIA = :NEW.DIA_SEMANA
    AND :NEW.HORA_ENTRADA BETWEEN HORARIO.HORA_INICIO AND HORARIO.HORA_FINAL;

  IF v_id_horario IS NOT NULL THEN
    UPDATE FICHAJE F
    SET F.HORA_ENTRADA = :NEW.HORA_ENTRADA,
        F.HORA_SALIDA = :NEW.HORA_SALIDA,
        F.PAUSA_INICIO = :NEW.PAUSA_INICIO,
        F.PAUSA_FINAL = :NEW.PAUSA_FINAL,
        F.HORARIO_ID = v_id_horario
    WHERE F.ID_FICHAJE = :OLD.ID_FICHAJE;
  END IF;
END;
/
